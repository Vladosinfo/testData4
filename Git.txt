GIT: https://git-scm.com/book/ru/v2
GitHub
Bitbucket
AWS CodeCommit
GitLab

Commands:
	git --version
	
// Конфигурация (перед работой):	
	git config --global user.name "Vladyslav Pasko"
	git config --global user.email "vladys.pasko@gmail.com
	
// Смотрим конфиг	
	git config -l
	
// Windows commands:
	dir // Просмотр содержимого директории
	type .\.gitconfig // Просмотр содержимого файла
	mkdir myproject // Создаем директорию
	d: // Перейти на диск d (в корень диска d)
	cd ../ // Перейти на уровень выше (директорией выше)
	cd myproject // Просмотр содержимого директории
	mkdir myproject // Создаем рабочую директорию для работы в Git
	
	git init . // Создаем базу данных Git (в результате создается директория .git - это и есть
		база данных git. Теперь в этой директории будут сохраняться все изменения. 
		Еще называют - Repository)
		Эта директория теперь отслеживается.
		
	git status // Очень частоиспользуемая комманда - для просмотра того что происходит: коммиты, бранчи...
	
brancm master - золотая копия
commit // В русской книге переводится как - сделать снимок.
	
	git add * // Добавляем два файла в стейджинг статус. Звездочка включает все новые файлы. 
		Если хотим удалить файл изстейджинга - комманда: git rm --cached имя_файла
	Теперь мы можем сделать commit - снимок
	
	git commit -m "My Initial commit, this is Version 1.0 // Делаем коммиты
		Получается три стадии: создаем/редактируем файлы. Далее добавлям файлы в стейдж - коммандой git add
		далее (если мы хотим создать как бы копию (скриншот), сником - делаем git commit - все, у нас зафиксировались все изменения
		во всехтих файлах. Далее можем продолжать редктировать, все что хотим делаем потому что всегда можно будет вернуться 
		на/в предыдущую версию/commit. Другими словами commit это каждая последующая верся к которой можем вернуться. 
		Фактически копия в локальном репозитории git базы данных )
		
		Стадии:
		1. Изменения;
		2. git add * (можно также с точкой вместо звездочки git add .)
		3. git commit -m "Some comment v1"
		4. git push // загрузка на удаленный сервер/репозиторий
		
		git log // Просмотр всех коммитов
		git log -1 // Просмотр последнего коммита

		git checkout -- someNewFile.txt // возвращаемся к предыдущей версии файла
		
		git diff --staged // После комманды add показывает что будет добавлено в commit (другими словами - показывает какая разница
			между последним коммитом и той разницей которая была сделана на текущий момент)
			
		.gitignore // Файл в директории в который добавляем все файлы и директории которые мы ходим чтобы git игнорировал 
		
// marge		
		В мастер - делаются marge (а не commit)
		
		git init myapp // Создалась директория/репозиторий
		git branch // Показать бранчи/ветки
		
		git branch fix_error // Создаем бренч с именем - fix_error
		git checkout fix_error // Переходим на бренч - fix_error
		git branch -d fix_error // Стираем бренч (предварительно нужно с него перейти на уровень выше)
		git branch -D fix_error // Если мы в ветке сделали коммит, git недает так просто стереть. В оэтом случае стираем бренч
			с указанием большой буквы -D
		git checkout -b fix_error // Создаем новый бренч и переходим на него - одной командой
		
		git merge fix_error // Мерджим - соединяем ветку fix_error c master
		
// Можно вернуться на любой из момитов - указывая его hash (хеш коммита)

		git checkout 5e3953fe69d86f3326d09eb11eda49b70500a394 // Мереход на моммит с указанным хешом
			(если мосмотреть - git log, то мы увидем что HEAD будет обозначен именно этот коммит)
		git checkout master // Возвращаемся обратно в мастер (передвигаем - HEAD в мастер)
			(после checkout - указываем имя ветки на которую хотим перейти)

		git commit --amend // Изменяем коммит (содержимое коммита) - неделая самого коммита.
		
		git reset --hard HEAD~2 // Жесткое безвозвратное удаление двух последних коммитов 
			(~ цыфра после тильды означает количество "удаляемых коммитов")
		
		git reset --soft HEAD~2 // Убираем коммиты из истории...
		
		git push --set-upstream https://github.com/Vladosinfo/testData4.git somechanges // Заливаем изменения на сервер 
		GitHub к примеру. Заливаем находясь на бренче (имени которого нету на сервере)
		После этого нужно на сервере смерджить. Запрашиваем мердж - комманда: pull request
			
		
